






Started logging.

<<<
Content-Length: 3022

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":1992,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"d:\\Projects\\arduino_beaver\\00_main","rootUri":"file:///d%3A/Projects/arduino_beaver/00_main","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Projects/arduino_beaver/00_main","name":"00_main"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 382

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino","languageId":"cpp","version":1,"text":"#include \"setup.h\"\r\n#include \"elements.h\"\r\n#include \"inputs.h\"\r\n#include \"game.h\"\r\n\r\nvoid setup() {\r\n  game::SetupGame();\r\n}\r\n\r\nvoid loop() {\r\n  game::LoopGame();\r\n}\r\n"}}}Content-Length: 3968

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\n\r\nnamespace elements {\r\n\r\n  struct Element {\r\n    int posX, posY;\r\n    int size;\r\n    bool rendering = false;\r\n\r\n    Element(int startPosX, int startPosY, int startSize) {\r\n        posX = startPosX;\r\n        posY = startPosY;\r\n        size = startSize;\r\n    }\r\n\r\n    Element() {\r\n        Element(0,0,1);\r\n    }\r\n\r\n    void Move(int x, int y) {\r\n        posX = x;\r\n        posY = y;\r\n    }\r\n\r\n    void Render();\r\n  };\r\n  \r\n  enum class Player_State\r\n  {\r\n      standing,\r\n      running,\r\n      dead\r\n  };\r\n\r\n  struct Player : Element {\r\n      Player_State playerState;\r\n      bool runAnim = false; // On false, it uses first sprite, on true second\r\n      \r\n      Player(Player_State startPlayerState) : Element(0, 1, 2){\r\n          playerState = startPlayerState;\r\n          \r\n      }\r\n  \r\n      void Render() {\r\n        if(rendering == true) {\r\n          lcd.setCursor(posX, posY);\r\n          lcd.write((byte)tailIndex);\r\n          lcd.setCursor(posX + 1, posY);\r\n          lcd.write((byte)(runAnim == true ? runOneIndex : runTwoIndex));\r\n          runAnim = !runAnim;\r\n        }\r\n      }\r\n  \r\n      void Jump() {\r\n        Serial.println(\"JUMP\");\r\n        posY = 0;\r\n      }\r\n\r\n      void Fall() {\r\n        posY = 1;\r\n      }\r\n  \r\n      void Die() {\r\n        Serial.println(\"DIE\");\r\n      }\r\n  };\r\n\r\n  struct Obstacle : Element {\r\n        //byte sprite[8];\r\n        bool canMove = false;\r\n        bool movesLeft = true; // Don't support moving right yet, due to collision detection\r\n        Player* currentPlayer;\r\n        int obstacleType = 0; // 0 == bottom ; 1 == top\r\n\r\n        Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer) : Element(startPosX, startPosY, startSize) {\r\n          //int spriteLength = sizeof(startSprite) / sizeof(startSprite[0]);\r\n          //for(int i = 0; i < spriteLength; i++) {\r\n          //  sprite[i] = startSprite[i];\r\n          //}\r\n          currentPlayer = startPlayer;\r\n        }\r\n\r\n        Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer, bool startCanMove, bool startMovesLeft, int startObstacleType){\r\n          Obstacle(startPosX, startPosY, startSize, startPlayer);\r\n          canMove = startCanMove;\r\n          movesLeft = startMovesLeft;\r\n          obstacleType = startObstacleType;\r\n        }\r\n\r\n        void Render() {\r\n          if(rendering == true ) {\r\n            lcd.setCursor(posX, posY);\r\n            lcd.write((byte) (obstacleType == 0 ? obstacleBottomIndex : obstacleTopIndex));\r\n          }\r\n        }\r\n\r\n        void Reset() {\r\n          posX = movesLeft == true ? 16 : 0;\r\n          rendering = true;\r\n        }\r\n\r\n        void Move() {\r\n          if(currentGameState == Game_State::running && rendering == true) {\r\n            if(canMove == true) {\r\n              bool hitPlayer = false;\r\n              int newX = posX;\r\n              if(movesLeft == true) {\r\n                newX -= 1;\r\n                if(newX < 0) {\r\n                  rendering = false;\r\n                }\r\n              } else {\r\n                newX += 1;\r\n                if(newX > 16) {\r\n                  rendering = false;\r\n                }\r\n              } // end check move right\r\n              if(newX <= ((*currentPlayer).posX + (*currentPlayer).size)) {\r\n                hitPlayer = true;\r\n                currentGameState = Game_State::over;\r\n              } else {\r\n                posX = newX;\r\n              }\r\n            } // end check can move\r\n          } // end check game is running\r\n        }\r\n    };\r\n}\r\n"}}}Content-Length: 6491

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\n\r\nnamespace game {\r\n  unsigned long current_time = 0;\r\n\r\n  elements::Player* player = new elements::Player(elements::Player_State::standing);\r\n\r\n                                            // PIN, PRESS, HOLD, RELEASE\r\n  inputs::Button* btnOne = new inputs::Button(BTN_PIN_ONE,\r\n  [&player]() { // PRESS\r\n    player->Jump(); \r\n  }, \r\n  [&player]() { // HOLD\r\n    //Serial.println(\"HOLD\"); \r\n  }, \r\n  [&player, &currentGameState]() { // RELEASE\r\n    player->Fall(); \r\n    if(currentGameState == Game_State::stopped || currentGameState == Game_State::over) {\r\n      currentGameState = Game_State::running;\r\n    }\r\n  }\r\n  );\r\n\r\n  //                                                 Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer, bool startCanMove, bool startMovesLeft, int startObstacleType){\r\n  elements::Obstacle* bottomObstacleOne = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleTwo = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleThree = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleFour = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n\r\n  elements::Obstacle* topObstacleOne = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleTwo = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleThree = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleFour = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n\r\n  elements::Obstacle* obstacles[] = {\r\n    bottomObstacleOne,\r\n    bottomObstacleTwo,\r\n    bottomObstacleThree,\r\n    bottomObstacleFour,\r\n    topObstacleOne,\r\n    topObstacleTwo,\r\n    topObstacleThree,\r\n    topObstacleFour\r\n  };\r\n  int obstacleIndex = 0;\r\n  unsigned long lastTimeObstacleSpawn = 0;\r\n  unsigned long OBSTACLE_SPAWN_INTERVAL = 600;\r\n  unsigned long NEW_GAME_OBSTACLE_SPAWN_INTERVAL = 1000;\r\n  int OBSTACLE_SPAWN_CHANCE = 50; // from 0 to 100\r\n  int chanceModifier = 0;\r\n  int MAX_CHANCE_MODIFIER = 500;\r\n  \r\n  bool gameStarted = false;\r\n  // PROTOTYPES\r\n  void RenderLogic();\r\n  \r\n  void SetupGame() {\r\n    Serial.begin(9600);\r\n    lcd.begin(16, 2);\r\n    \r\n    // TODO Try to skip index 0 and start from 1, might be faster, no idea why\r\n    lcd.createChar(tailIndex, &sprite[0]);\r\n    lcd.createChar(runOneIndex, &sprite[8]);\r\n    lcd.createChar(runTwoIndex, &sprite[16]);\r\n    lcd.createChar(obstacleTopIndex, obstacleTop);\r\n    lcd.createChar(obstacleBottomIndex, obstacleBottom);\r\n  }\r\n\r\n  void StartGame() {\r\n    Serial.println(\"StartGame\");\r\n  }\r\n\r\n  void HandleInput() {\r\n    \r\n  }\r\n  \r\n//Score: 999999999    16 chars\r\n//Try again?          10 chars\r\n  void LoopGame() {\r\n    current_time = millis();\r\n\r\n    if(current_time - last_logic_time > LOGIC_INTERVAL) {// ALL INPUT HERE\r\n      last_logic_time = current_time;\r\n      (*btnOne).Check();\r\n    }\r\n    if(current_time - last_render_time > RENDER_INTERVAL) {// ALL RENDER\r\n      last_render_time = current_time;\r\n      RenderLogic();\r\n    }\r\n    \r\n  }\r\n\r\n  void RenderLogic() {\r\n    // HANDLE BUTTON CHANGE STATES\r\n    (*btnOne).OnRender();\r\n    switch(currentGameState) {\r\n      case Game_State::stopped :\r\n        lcd.clear();\r\n        lcd.setCursor(0, 1);\r\n        lcd.write(\"RUNNING BEAVER\");\r\n        lcd.setCursor(1, 5);\r\n        lcd.write(\"start!\");\r\n      break;\r\n      case Game_State::running :\r\n        lcd.clear();\r\n        // PUT ALL RENDER CALLS HERE        \r\n        (*player).Render();\r\n    \r\n        // obstacle spawn logic\r\n        if(gameStarted == false) {\r\n          if(current_time - lastTimeObstacleSpawn > NEW_GAME_OBSTACLE_SPAWN_INTERVAL) {\r\n            (*obstacles[obstacleIndex]).Reset();\r\n            obstacleIndex = obstacleIndex >= 16 ? 0 : obstacleIndex + 1;\r\n            lastTimeObstacleSpawn = current_time;\r\n            gameStarted = true;\r\n            (*player).rendering = true;\r\n          }\r\n        }\r\n        if(gameStarted == true && current_time - lastTimeObstacleSpawn > OBSTACLE_SPAWN_INTERVAL) {\r\n          if(random(0, 100) < OBSTACLE_SPAWN_CHANCE + chanceModifier) {\r\n            (*obstacles[obstacleIndex]).Reset();\r\n            obstacleIndex = obstacleIndex >= 16 ? 0 : obstacleIndex + 1;\r\n            chanceModifier = 0;\r\n          } else {\r\n            chanceModifier = chanceModifier < MAX_CHANCE_MODIFIER ? chanceModifier + 1 : MAX_CHANCE_MODIFIER;\r\n          }\r\n          lastTimeObstacleSpawn = current_time;\r\n        }\r\n        \r\n        // obstacle render logic\r\n        (*bottomObstacleOne).Render();\r\n        (*bottomObstacleTwo).Render();\r\n        (*bottomObstacleThree).Render();\r\n        (*bottomObstacleFour).Render();\r\n\r\n        (*topObstacleOne).Render();\r\n        (*topObstacleTwo).Render();\r\n        (*topObstacleThree).Render();\r\n        (*topObstacleFour).Render();\r\n\r\n        if(current_time - last_score_time > SCORING_INTERVAL) {\r\n          last_score_time = current_time;\r\n          score += 1;\r\n          if(score > MAX_SCORE) {\r\n            score = MAX_SCORE;\r\n          }\r\n        }\r\n      break;\r\n      case Game_State::over :\r\n        gameStarted = false;\r\n        score = 0;\r\n        last_score_time = 0;\r\n        lastTimeObstacleSpawn = 0;\r\n        chanceModifier = 0;\r\n        obstacleIndex = 0;\r\n        \r\n        (*bottomObstacleOne).rendering = false;\r\n        (*bottomObstacleTwo).rendering = false;\r\n        (*bottomObstacleThree).rendering = false;\r\n        (*bottomObstacleFour).rendering = false;\r\n\r\n        (*topObstacleOne).rendering = false;\r\n        (*topObstacleTwo).rendering = false;\r\n        (*topObstacleThree).rendering = false;\r\n        (*topObstacleFour).rendering = false;\r\n        \r\n        lcd.clear();\r\n        lcd.setCursor(0,0);\r\n        lcd.write(\"Score: \" + score);\r\n        lcd.setCursor(1,3);\r\n        lcd.write(\"Try again?\");\r\n      break;\r\n    }\r\n  }\r\n}\r\n"}}}Content-Length: 2880

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\ntypedef void (*func_type)(void);\r\n\r\nnamespace inputs {\r\n  struct Button {\r\n        int pin = 0;\r\n        // pressed is used because I want the fps of the render to not be insanely fast, but locked to a set number\r\n        // that is because if it was as fast as the CPU goes, first of all it would render faster than we can see, unless I use delays\r\n        // and secondly, it could also be open to random slow downs or break everything else due to those delays.\r\n        // As such, we have two logic timelines, one that happens at 60FPS(FOR NOW) for the render, and another, which happens almost at CPU speed\r\n        // for the input.\r\n        // Once input is sent however, say u pressed the button, if you released it before the render loop occured, the player would have never jumped\r\n        // so, once you press, I save it as a boolean, and I don't clear it until used in the render loop.\r\n        bool pressed = false;\r\n        bool held = false;\r\n        bool released = false;\r\n        //func_type functions[256];\r\n        //void (*func)(void);\r\n        fun
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
c_type pressFunc;\r\n        func_type holdFunc;\r\n        func_type releaseFunc;\r\n        \r\n        Button(int startPin, func_type startPressFunc, func_type startHoldFund, func_type startReleaseFunc) {\r\n            pin = startPin;\r\n            pressFunc = startPressFunc;\r\n            holdFunc = startHoldFund;\r\n            releaseFunc = startReleaseFunc;\r\n            //memcpy(functions, startFunctions, sizeof(startFunctions));\r\n        }\r\n\r\n        void Check() {\r\n          if(digitalRead(pin) == HIGH) {\r\n            if(held == false) {\r\n              if(pressed == false) {\r\n                pressed = true;\r\n              }\r\n              held = true;\r\n            }\r\n          } else {\r\n            if(held == true) {\r\n              held = false;\r\n              released=  true;\r\n            }\r\n          }\r\n        }\r\n\r\n        void OnRender() {\r\n          Press();\r\n          Hold();\r\n          Release();\r\n        }\r\n\r\n        void Press() {\r\n          if(pressed == true) {\r\n            Serial.println(\"PRESS\");\r\n            pressed = false;\r\n            pressFunc();\r\n            //for(int i = 0; i < 256; i++) {\r\n            //  functions[i]();\r\n            //}\r\n          }\r\n        }\r\n\r\n        void Hold() {\r\n          if(held == true) {\r\n            holdFunc();\r\n          }\r\n        }\r\n\r\n        void Release() {\r\n          if(released == true) {\r\n            releaseFunc();\r\n            released = false;\r\n          }\r\n        }\r\n  };\r\n}\r\n"}}}Content-Length: 1872

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h","languageId":"cpp","version":1,"text":"#pragma once\r\n#include <SoftwareSerial.h>\r\n#include <LiquidCrystal.h>\r\n#define byte uint8_t\r\n\r\n// TIMING\r\n\r\nunsigned long RENDER_INTERVAL = 16.6;\r\nunsigned long LOGIC_INTERVAL = 2;\r\n\r\nunsigned long last_render_time = 0;\r\nunsigned long last_logic_time = 0;\r\n\r\n// PINS\r\nint BTN_PIN_ONE = 1;\r\n\r\nint isRunning = 0;\r\n\r\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\r\n\r\nbyte obstacleTop[8] = {\r\n    0b11111,\r\n    0b01111,\r\n    0b00110,\r\n    0b00110,\r\n    0b00111,\r\n    0b01111,\r\n    0b11110,\r\n    0b00000\r\n  };\r\n  \r\n  byte obstacleBottom[8] = {\r\n    0b00000,\r\n    0b11110,\r\n    0b01111,\r\n    0b00111,\r\n    0b00110,\r\n    0b00110,\r\n    0b01111,\r\n    0b11111\r\n  };\r\n\r\n  byte sprite[24] = {\r\n    // TAIL\r\n    0b00000,\r\n    0b00100,\r\n    0b00110,\r\n    0b00111,\r\n    0b00011,\r\n    0b00001,\r\n    0b00000,\r\n    0b00000,\r\n    // RUN ONE\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b10000,\r\n    0b10000,\r\n    // RUN TWO\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b00100,\r\n    0b00100\r\n  };\r\n\r\n  const int tailIndex = 0;\r\n  const int runOneIndex = 1;\r\n  const int runTwoIndex = 2;\r\n  const int obstacleTopIndex = 3;\r\n  const int obstacleBottomIndex = 4;\r\n\r\n  // 999999999\r\n  int score = 0;\r\n  unsigned long SCORING_INTERVAL = 1000;\r\n  unsigned long last_score_time = 0;\r\n  int MAX_SCORE = 999999999;\r\n  \r\n  enum class Game_State\r\n  {\r\n      stopped,\r\n      running,\r\n      over\r\n  };\r\n  \r\n  Game_State currentGameState = Game_State::stopped;\r\n"}}}Content-Length: 255

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 254

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 250

{"jsonrpc":"2.0","id":3,"method":"textDocu
>>>
Content-Length: 716

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h","diagnostics":[{"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'digitalRead'"},{"range":{"start":{"line":32,"character":33},"end":{"line":32,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'HIGH'"},{"range":{"start":{"line":55,"character":12},"end":{"line":55,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"}]},"jsonrpc":"2.0"}Content-Length: 3921

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'inputs'"},{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'inputs'"},{"range":{"start":{"line":25,"character":2},"end":{"line":25,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":25,"character":46},"end":{"line":25,"character":54}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":26,"character":2},"end":{"line":26,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":26,"character":46},"end":{"line":26,"character":54}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":27,"character":2},"end":{"line":27,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":27,"character":48},"end":{"line":27,"character":56}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":28,"character":47},"end":{"line":28,"character":55}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":30,"character":43},"end":{"line":30,"character":51}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":31,"character":2},"end":{"line":31,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":31,"character":43},"end":{"line":31,"character":51}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":32,"character":45},"end":{"line":32,"character":53}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"severity":1,"code":"fatal_too_many_errors","source":"clang","message":"Too many errors emitted, stopping now"}]},"jsonrpc":"2.0"}Content-Length: 3766

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h","diagnostics":[{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":47,"character":10},"end":{"line":47,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":49,"character":10},"end":{"line":49,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":49,"character":21},"end":{"line":49,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":49,"character":45},"end":{"line":49,"character":56}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'runOneIndex'"},{"range":{"start":{"line":49,"character":59},"end":{"line":49,"character":70}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'runTwoIndex'"},{"range":{"start":{"line":55,"character":8},"end":{"line":55,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":64,"character":8},"end":{"line":64,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":92,"character":12},"end":{"line":92,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":93,"character":12},"end":{"line":93,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":93,"character":23},"end":{"line":93,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":93,"character":50},"end":{"line":93,"character":69}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'obstacleBottomIndex'"},{"range":{"start":{"line":93,"character":72},"end":{"line":93,"character":88}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'obstacleTopIndex'"},{"range":{"start":{"line":103,"character":13},"end":{"line":103,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'currentGameState'"},{"range":{"start":{"line":103,"character":33},"end":{"line":103,"character":43}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Game_State'"},{"range":{"start":{"line":120,"character":16},"end":{"line":120,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'currentGameState'"},{"range":{"start":{"line":120,"character":35},"end":{"line":120,"character":45}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Game_State'"}]},"jsonrpc":"2.0"}Content-Length: 4302

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h","diagnostics":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'RENDER_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":28}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'LOGIC_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":10,"character":14},"end":{"line":10,"character":30}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_render_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_logic_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":15}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'BTN_PIN_ONE' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":16,"character":4},"end":{"line":16,"character":13}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'isRunning' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":18,"character":14},"end":{"line":18,"character":17}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'lcd' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":20,"character":5},"end":{"line":20,"character":16}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'obstacleTop' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":31,"character":7},"end":{"line":31,"character":21}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'obstacleBottom' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":42,"character":7},"end":{"line":42,"character":13}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'sprite' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":79,"character":6},"end":{"line":79,"character":11}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'score' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":80,"character":16},"end":{"line":80,"character":32}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'SCORING_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":81,"character":16},"end":{"line":81,"character":31}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_score_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":82,"character":6},"end":{"line":82,"character":15}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'MAX_SCORE' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":91,"character":13},"end":{"line":91,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'currentGameState' defined in a header file; variable definitions in header files can lead to ODR violations"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 660

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino","diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":17}},"severity":1,"code":"capture_non_automatic_variable","source":"clang","message":"In included file: 'player' cannot be captured because it does not have automatic storage duration\n\nC:\\Users\\green\\AppData\\Local\\Temp\\arduino-language-server643265327\\sketch/game.h:12:5:\nnote: error occurred here\n\nC:\\Users\\green\\AppData\\Local\\Temp\\arduino-language-server643265327\\sketch/game.h:8:21:\nnote: 'player' declared here"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
ment/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 252

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 251

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/29","percentage":3.4482758620689653,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 252

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"message":"Too many errors emitted, stopping now","severity":1,"code":"fatal_too_many_errors","source":"clang"}]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 256

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/29","percentage":6.896551724137931,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/29","percentage":10.344827586206897,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/29","percentage":10.344827586206897,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/29","percentage":13.793103448275861,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/29","percentage":13.793103448275861,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/29","percentage":17.24137931034483,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/29","percentage":17.24137931034483,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/29","percentage":20.689655172413794,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/29","percentage":24.137931034482758,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/29","percentage":24.137931034482758,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/29","percentage":27.586206896551722,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/29","percentage":27.586206896551722,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/29","percentage":31.03448275862069,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/29","percentage":31.03448275862069,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/29","percentage":34.48275862068966,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/29","percentage":34.48275862068966,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/29","percentage":37.93103448275862,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/29","percentage":37.93103448275862,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/29","percentage":41.37931034482759,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/29","percentage":41.37931034482759,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/29","percentage":44.827586206896555,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/29","percentage":44.827586206896555,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/29","percentage":48.275862068965516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/29","percentage":48.275862068965516,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/29","percentage":51.724137931034484,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/29","percentage":51.724137931034484,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/29","percentage":55.172413793103445,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/29","percentage":58.62068965517241,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/29","percentage":58.62068965517241,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/29","percentage":62.06896551724138,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/29","percentage":62.06896551724138,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/29","percentage":65.51724137931035,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/29","percentage":65.51724137931035,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/29","percentage":68.96551724137932,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/29","percentage":68.96551724137932,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/29","percentage":72.41379310344827,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/29","percentage":72.41379310344827,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/29","percentage":75.86206896551724,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/29","percentage":79.3103448275862,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/29","percentage":82.75862068965517,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/29","percentage":86.20689655172414,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/29","percentage":89.65517241379311,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"27/29","percentage":93.10344827586206,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"28/29","percentage":96.55172413793103,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"position":{"line":0,"character":16}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"position":{"line":0,"character":16}}}
>>>
Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 76

{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}Content-Length: 194

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"position":{"line":10,"character":12}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"position":{"line":10,"character":12}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":17,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":17,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3023

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":11620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"d:\\Projects\\arduino_beaver\\00_main","rootUri":"file:///d%3A/Projects/arduino_beaver/00_main","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Projects/arduino_beaver/00_main","name":"00_main"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1872

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h","languageId":"cpp","version":1,"text":"#pragma once\r\n#include <SoftwareSerial.h>\r\n#include <LiquidCrystal.h>\r\n#define byte uint8_t\r\n\r\n// TIMING\r\n\r\nunsigned long RENDER_INTERVAL = 16.6;\r\nunsigned long LOGIC_INTERVAL = 2;\r\n\r\nunsigned long last_render_time = 0;\r\nunsigned long last_logic_time = 0;\r\n\r\n// PINS\r\nint BTN_PIN_ONE = 1;\r\n\r\nint isRunning = 0;\r\n\r\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\r\n\r\nbyte obstacleTop[8] = {\r\n    0b11111,\r\n    0b01111,\r\n    0b00110,\r\n    0b00110,\r\n    0b00111,\r\n    0b01111,\r\n    0b11110,\r\n    0b00000\r\n  };\r\n  \r\n  byte obstacleBottom[8] = {\r\n    0b00000,\r\n    0b11110,\r\n    0b01111,\r\n    0b00111,\r\n    0b00110,\r\n    0b00110,\r\n    0b01111,\r\n    0b11111\r\n  };\r\n\r\n  byte sprite[24] = {\r\n    // TAIL\r\n    0b00000,\r\n    0b00100,\r\n    0b00110,\r\n    0b00111,\r\n    0b00011,\r\n    0b00001,\r\n    0b00000,\r\n    0b00000,\r\n    // RUN ONE\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b10000,\r\n    0b10000,\r\n    // RUN TWO\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b00100,\r\n    0b00100\r\n  };\r\n\r\n  const int tailIndex = 0;\r\n  const int runOneIndex = 1;\r\n  const int runTwoIndex = 2;\r\n  const int obstacleTopIndex = 3;\r\n  const int obstacleBottomIndex = 4;\r\n\r\n  // 999999999\r\n  int score = 0;\r\n  unsigned long SCORING_INTERVAL = 1000;\r\n  unsigned long last_score_time = 0;\r\n  int MAX_SCORE = 999999999;\r\n  \r\n  enum class Game_State\r\n  {\r\n      stopped,\r\n      running,\r\n      over\r\n  };\r\n  \r\n  Game_State currentGameState = Game_State::stopped;\r\n"}}}Content-Length: 2880

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\ntypedef void (*func_type)(void);\r\n\r\nnamespace inputs {\r\n  struct Button {\r\n        int pin = 0;\r\n        // pressed is used because I want the fps of the render to not be insanely fast, but locked to a set number\r\n        // that is because if it was as fast as the CPU goes, first of all it would render faster than we can see, unless I use delays\r\n        // and secondly, it could also be open to random slow downs or break everything else due to those delays.\r\n        // As such, we have two logic timelines, one that happens at 60FPS(FOR NOW) for the render, and another, which happens almost at CPU speed\r\n        // for the input.\r\n        // Once input is sent however, say u pressed the button, if you released it before the render loop occured, the player would have never jumped\r\n        // so, once you press, I save it as a boolean, and I don't clear it until used in the render loop.\r\n        bool pressed = false;\r\n        bool held = false;\r\n        bool released = false;\r\n        //func_type functions[256];\r\n        //void (*func)(void);\r\n        func_type pressFunc;\r\n        func_type holdFunc;\r\n        func_type releaseFunc;\r\n        \r\n        Button(int startPin, func_type startPressFunc, func_type startHoldFund, func_type startReleaseFunc) {\r\n            pin = startPin;\r\n            pressFunc = startPressFunc;\r\n            holdFunc = startHoldFund;\r\n            releaseFunc = startReleaseFunc;\r\n            //memcpy(functions, startFunctions, sizeof(startFunctions));\r\n        }\r\n\r\n        void Check() {\r\n          if(digitalRead(pin) == HIGH) {\r\n            if(held == false) {\r\n              if(pressed == false) {\r\n                pressed = true;\r\n              }\r\n              held = true;\r\n            }\r\n          } else {\r\n            if(held == true) {\r\n              held = false;\r\n              released=  true;\r\n            }\r\n          }\r\n        }\r\n\r\n        void OnRender() {\r\n          Press();\r\n          Hold();\r\n          Release();\r\n        }\r\n\r\n        void Press() {\r\n          if(pressed == true) {\r\n            Serial.println(\"PRESS\");\r\n            pressed = false;\r\n            pressFunc();\r\n            //for(int i = 0; i < 256; i++) {\r\n            //  functions[i]();\r\n            //}\r\n          }\r\n        }\r\n\r\n        void Hold() {\r\n          if(held == true) {\r\n            holdFunc();\r\n          }\r\n        }\r\n\r\n        void Release() {\r\n          if(released == true) {\r\n            releaseFunc();\r\n            released = false;\r\n          }\r\n        }\r\n  };\r\n}\r\n"}}}Content-Length: 6491

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\n\r\nnamespace game {\r\n  unsigned long current_time = 0;\r\n\r\n  elements::Player* player = new elements::Player(elements::Player_State::standing);\r\n\r\n                                            // PIN, PRESS, HOLD, RELEASE\r\n  inputs::Button* btnOne = new inputs::Button(BTN_PIN_ONE,\r\n  [&player]() { // PRESS\r\n    player->Jump(); \r\n  }, \r\n  [&player]() { // HOLD\r\n    //Serial.println(\"HOLD\"); \r\n  }, \r\n  [&player, &currentGameState]() { // RELEASE\r\n    player->Fall(); \r\n    if(currentGameState == Game_State::stopped || currentGameState == Game_State::over) {\r\n      currentGameState = Game_State::running;\r\n    }\r\n  }\r\n  );\r\n\r\n  //                                                 Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer, bool startCanMove, bool startMovesLeft, int startObstacleType){\r\n  elements::Obstacle* bottomObstacleOne = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleTwo = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleThree = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n  elements::Obstacle* bottomObstacleFour = new elements::Obstacle(16,1,1, player,true, true, 0);\r\n\r\n  elements::Obstacle* topObstacleOne = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleTwo = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleThree = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n  elements::Obstacle* topObstacleFour = new elements::Obstacle(16,0,1, player,true, true, 1);\r\n\r\n  elements::Obstacle* obstacles[] = {\r\n    bottomObstacleOne,\r\n    bottomObstacleTwo,\r\n    bottomObstacleThree,\r\n    bottomObstacleFour,\r\n    topObstacleOne,\r\n    topObstacleTwo,\r\n    topObstacleThree,\r\n    topObstacleFour\r\n  };\r\n  int obstacleIndex = 0;\r\n  unsigned long lastTimeObstacleSpawn = 0;\r\n  unsigned long OBSTACLE_SPAWN_INTERVAL = 600;\r\n  unsigned long NEW_GAME_OBSTACLE_SPAWN_INTERVAL = 1000;\r\n  int OBSTACLE_SPAWN_CHANCE = 50; // from 0 to 100\r\n  int chanceModifier = 0;\r\n  int MAX_CHANCE_MODIFIER = 500;\r\n  \r\n  bool gameStarted = false;\r\n  // PROTOTYPES\r\n  void RenderLogic();\r\n  \r\n  void SetupGame() {\r\n    Serial.begin(9600);\r\n    lcd.begin(16, 2);\r\n    \r\n    // TODO Try to skip index 0 and start from 1, might be faster, no idea why\r\n    lcd.createChar(tailIndex, &sprite[0]);\r\n    lcd.createChar(runOneIndex, &sprite[8]);\r\n    lcd.createChar(runTwoIndex, &sprite[16]);\r\n    lcd.createChar(obstacleTopIndex, obstacleTop);\r\n    lcd.createChar(obstacleBottomIndex, obstacleBottom);\r\n  }\r\n\r\n  void StartGame() {\r\n    Serial.println(\"StartGame\");\r\n  }\r\n\r\n  void HandleInput() {\r\n    \r\n  }\r\n  \r\n//Score: 999999999    16 chars\r\n//Try again?          10 chars\r\n  void LoopGame() {\r\n    current_time = millis();\r\n\r\n    if(current_time - last_logic_time > LOGIC_INTERVAL) {// ALL INPUT HERE\r\n      last_logic_time = current_time;\r\n      (*btnOne).Check();\r\n    }\r\n    if(current_time - last_render_time > RENDER_INTERVAL) {// ALL RENDER\r\n      last_render_time = current_time;\r\n      RenderLogic();\r\n    }\r\n    \r\n  }\r\n\r\n  void RenderLogic() {\r\n    // HANDLE BUTTON CHANGE STATES\r\n    (*btnOne).OnRender();\r\n    switch(currentGameState) {\r\n      case Game_State::stopped :\r\n        lcd.clear();\r\n        lcd.setCursor(0, 1);\r\n        lcd.write(\"RUNNING BEAVER\");\r\n        lcd.setCursor(1, 5);\r\n        lcd.write(\"start!\");\r\n      break;\r\n      case Game_State::running :\r\n        lcd.clear();\r\n        // PUT ALL RENDER CALLS HERE        \r\n        (*player).Render();\r\n    \r\n        // obstacle spawn logic\r\n        if(gameStarted == false) {\r\n          if(current_time - lastTimeObstacleSpawn > NEW_GAME_OBSTACLE_SPAWN_INTERVAL) {\r\n            (*obstacles[obstacleIndex]).Reset();\r\n            obstacleIndex = obstacleIndex >= 16 ? 0 : obstacleIndex + 1;\r\n            lastTimeObstacleSpawn = current_time;\r\n            gameStarted = true;\r\n            (*player).rendering = true;\r\n          }\r\n        }\r\n        if(gameStarted == true && current_time - lastTimeObstacleSpawn > OBSTACLE_SPAWN_INTERVAL) {\r\n          if(random(0, 100) < OBSTACLE_SPAWN_CHANCE + chanceModifier) {\r\n            (*obstacles[obstacleIndex]).Reset();\r\n            obstacleIndex = obstacleIndex >= 16 ? 0 : obstacleIndex + 1;\r\n            chanceModifier = 0;\r\n          } else {\r\n            chanceModifier = chanceModifier < MAX_CHANCE_MODIFIER ? chanceModifier + 1 : MAX_CHANCE_MODIFIER;\r\n          }\r\n          lastTimeObstacleSpawn = current_time;\r\n        }\r\n        \r\n        // obstacle render logic\r\n        (*bottomObstacleOne).Render();\r\n        (*bottomObstacleTwo).Render();\r\n        (*bottomObstacleThree).Render();\r\n        (*bottomObstacleFour).Render();\r\n\r\n        (*topObstacleOne).Render();\r\n        (*topObstacleTwo).Render();\r\n        (*topObstacleThree).Render();\r\n        (*topObstacleFour).Render();\r\n\r\n        if(current_time - last_score_time > SCORING_INTERVAL) {\r\n          last_score_time = current_time;\r\n          score += 1;\r\n          if(score > MAX_SCORE) {\r\n            score = MAX_SCORE;\r\n          }\r\n        }\r\n      break;\r\n      case Game_State::over :\r\n        gameStarted = false;\r\n        score = 0;\r\n        last_score_time = 0;\r\n        lastTimeObstacleSpawn = 0;\r\n        chanceModifier = 0;\r\n        obstacleIndex = 0;\r\n        \r\n        (*bottomObstacleOne).rendering = false;\r\n        (*bottomObstacleTwo).rendering = false;\r\n        (*bottomObstacleThree).rendering = false;\r\n        (*bottomObstacleFour).rendering = false;\r\n\r\n        (*topObstacleOne).rendering = false;\r\n        (*topObstacleTwo).rendering = false;\r\n        (*topObstacleThree).rendering = false;\r\n        (*topObstacleFour).rendering = false;\r\n        \r\n        lcd.clear();\r\n        lcd.setCursor(0,0);\r\n        lcd.write(\"Score: \" + score);\r\n        lcd.setCursor(1,3);\r\n        lcd.write(\"Try again?\");\r\n      break;\r\n    }\r\n  }\r\n}\r\n"}}}Content-Length: 3968

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\n\r\nnamespace elements {\r\n\r\n  struct Element {\r\n    int posX, posY;\r\n    int size;\r\n    bool rendering = false;\r\n\r\n    Element(int startPosX, int startPosY, int startSize) {\r\n        posX = startPosX;\r\n        posY = startPosY;\r\n        size = startSize;\r\n    }\r\n\r\n    Element() {\r\n        Element(0,0,1);\r\n    }\r\n\r\n    void Move(int x, int y) {\r\n        posX = x;\r\n        posY = y;\r\n    }\r\n\r\n    void Render();\r\n  };\r\n  \r\n  enum class Player_State\r\n  {\r\n      standing,\r\n      running,\r\n      dead\r\n  };\r\n\r\n  struct Player : Element {\r\n      Player_State playerState;\r\n      bool runAnim = false; // On false, it uses first sprit
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
e, on true second\r\n      \r\n      Player(Player_State startPlayerState) : Element(0, 1, 2){\r\n          playerState = startPlayerState;\r\n          \r\n      }\r\n  \r\n      void Render() {\r\n        if(rendering == true) {\r\n          lcd.setCursor(posX, posY);\r\n          lcd.write((byte)tailIndex);\r\n          lcd.setCursor(posX + 1, posY);\r\n          lcd.write((byte)(runAnim == true ? runOneIndex : runTwoIndex));\r\n          runAnim = !runAnim;\r\n        }\r\n      }\r\n  \r\n      void Jump() {\r\n        Serial.println(\"JUMP\");\r\n        posY = 0;\r\n      }\r\n\r\n      void Fall() {\r\n        posY = 1;\r\n      }\r\n  \r\n      void Die() {\r\n        Serial.println(\"DIE\");\r\n      }\r\n  };\r\n\r\n  struct Obstacle : Element {\r\n        //byte sprite[8];\r\n        bool canMove = false;\r\n        bool movesLeft = true; // Don't support moving right yet, due to collision detection\r\n        Player* currentPlayer;\r\n        int obstacleType = 0; // 0 == bottom ; 1 == top\r\n\r\n        Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer) : Element(startPosX, startPosY, startSize) {\r\n          //int spriteLength = sizeof(startSprite) / sizeof(startSprite[0]);\r\n          //for(int i = 0; i < spriteLength; i++) {\r\n          //  sprite[i] = startSprite[i];\r\n          //}\r\n          currentPlayer = startPlayer;\r\n        }\r\n\r\n        Obstacle(int startPosX, int startPosY, int startSize, Player* startPlayer, bool startCanMove, bool startMovesLeft, int startObstacleType){\r\n          Obstacle(startPosX, startPosY, startSize, startPlayer);\r\n          canMove = startCanMove;\r\n          movesLeft = startMovesLeft;\r\n          obstacleType = startObstacleType;\r\n        }\r\n\r\n        void Render() {\r\n          if(rendering == true ) {\r\n            lcd.setCursor(posX, posY);\r\n            lcd.write((byte) (obstacleType == 0 ? obstacleBottomIndex : obstacleTopIndex));\r\n          }\r\n        }\r\n\r\n        void Reset() {\r\n          posX = movesLeft == true ? 16 : 0;\r\n          rendering = true;\r\n        }\r\n\r\n        void Move() {\r\n          if(currentGameState == Game_State::running && rendering == true) {\r\n            if(canMove == true) {\r\n              bool hitPlayer = false;\r\n              int newX = posX;\r\n              if(movesLeft == true) {\r\n                newX -= 1;\r\n                if(newX < 0) {\r\n                  rendering = false;\r\n                }\r\n              } else {\r\n                newX += 1;\r\n                if(newX > 16) {\r\n                  rendering = false;\r\n                }\r\n              } // end check move right\r\n              if(newX <= ((*currentPlayer).posX + (*currentPlayer).size)) {\r\n                hitPlayer = true;\r\n                currentGameState = Game_State::over;\r\n              } else {\r\n                posX = newX;\r\n              }\r\n            } // end check can move\r\n          } // end check game is running\r\n        }\r\n    };\r\n}\r\n"}}}Content-Length: 382

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino","languageId":"cpp","version":1,"text":"#include \"setup.h\"\r\n#include \"elements.h\"\r\n#include \"inputs.h\"\r\n#include \"game.h\"\r\n\r\nvoid setup() {\r\n  game::SetupGame();\r\n}\r\n\r\nvoid loop() {\r\n  game::LoopGame();\r\n}\r\n"}}}Content-Length: 255

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h"},"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":12}},"context":{"diagnostics":[]}}}Content-Length: 252

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 250

{"jsonrpc":"2.0","id":3,"method":"textDocume
>>>
Content-Length: 716

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h","diagnostics":[{"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'digitalRead'"},{"range":{"start":{"line":32,"character":33},"end":{"line":32,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'HIGH'"},{"range":{"start":{"line":55,"character":12},"end":{"line":55,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"}]},"jsonrpc":"2.0"}Content-Length: 3921

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h","diagnostics":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":6,"character":33},"end":{"line":6,"character":41}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'inputs'"},{"range":{"start":{"line":9,"character":31},"end":{"line":9,"character":37}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'inputs'"},{"range":{"start":{"line":25,"character":2},"end":{"line":25,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":25,"character":46},"end":{"line":25,"character":54}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":26,"character":2},"end":{"line":26,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":26,"character":46},"end":{"line":26,"character":54}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":27,"character":2},"end":{"line":27,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":27,"character":48},"end":{"line":27,"character":56}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":28,"character":47},"end":{"line":28,"character":55}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":30,"character":43},"end":{"line":30,"character":51}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":31,"character":2},"end":{"line":31,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":31,"character":43},"end":{"line":31,"character":51}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":32,"character":45},"end":{"line":32,"character":53}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'elements'"},{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"severity":1,"code":"fatal_too_many_errors","source":"clang","message":"Too many errors emitted, stopping now"}]},"jsonrpc":"2.0"}Content-Length: 3766

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h","diagnostics":[{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":47,"character":10},"end":{"line":47,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":49,"character":10},"end":{"line":49,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":49,"character":21},"end":{"line":49,"character":25}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":49,"character":45},"end":{"line":49,"character":56}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'runOneIndex'"},{"range":{"start":{"line":49,"character":59},"end":{"line":49,"character":70}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'runTwoIndex'"},{"range":{"start":{"line":55,"character":8},"end":{"line":55,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":64,"character":8},"end":{"line":64,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Serial'"},{"range":{"start":{"line":92,"character":12},"end":{"line":92,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":93,"character":12},"end":{"line":93,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'lcd'"},{"range":{"start":{"line":93,"character":23},"end":{"line":93,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'byte'"},{"range":{"start":{"line":93,"character":50},"end":{"line":93,"character":69}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'obstacleBottomIndex'"},{"range":{"start":{"line":93,"character":72},"end":{"line":93,"character":88}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'obstacleTopIndex'"},{"range":{"start":{"line":103,"character":13},"end":{"line":103,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'currentGameState'"},{"range":{"start":{"line":103,"character":33},"end":{"line":103,"character":43}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Game_State'"},{"range":{"start":{"line":120,"character":16},"end":{"line":120,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'currentGameState'"},{"range":{"start":{"line":120,"character":35},"end":{"line":120,"character":45}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Game_State'"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 4302

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h","diagnostics":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'RENDER_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":28}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'LOGIC_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":10,"character":14},"end":{"line":10,"character":30}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_render_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_logic_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":15}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'BTN_PIN_ONE' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":16,"character":4},"end":{"line":16,"character":13}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'isRunning' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":18,"character":14},"end":{"line":18,"character":17}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'lcd' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":20,"character":5},"end":{"line":20,"character":16}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'obstacleTop' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":31,"character":7},"end":{"line":31,"character":21}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'obstacleBottom' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":42,"character":7},"end":{"line":42,"character":13}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'sprite' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":79,"character":6},"end":{"line":79,"character":11}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'score' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":80,"character":16},"end":{"line":80,"character":32}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'SCORING_INTERVAL' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":81,"character":16},"end":{"line":81,"character":31}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'last_score_time' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":82,"character":6},"end":{"line":82,"character":15}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'MAX_SCORE' defined in a header file; variable definitions in header files can lead to ODR violations"},{"range":{"start":{"line":91,"character":13},"end":{"line":91,"character":29}},"severity":2,"code":"misc-definitions-in-headers","source":"clang-tidy","message":"Variable 'currentGameState' defined in a header file; variable definitions in header files can lead to ODR violations"}]},"jsonrpc":"2.0"}Content-Length: 660

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino","diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":17}},"severity":1,"code":"capture_non_automatic_variable","source":"clang","message":"In included file: 'player' cannot be captured because it does not have automatic storage duration\n\nC:\\Users\\green\\AppData\\Local\\Temp\\arduino-language-server463971199\\sketch/game.h:12:5:\nnote: error occurred here\n\nC:\\Users\\green\\AppData\\Local\\Temp\\arduino-language-server463971199\\sketch/game.h:8:21:\nnote: 'player' declared here"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
nt/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/game.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 254

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/elements.h"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 257

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/00_main.ino"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}}}Content-Length: 58

{"jsonrpc":"2.0","id":6,"method":"shutdown","params":null}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}Content-Length: 153

{"jsonrpc":"2.0","id":0,"error":{"code":-32603,"message":"Request window/workDoneProgress/create failed with message: Language client is not ready yet"}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47


>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":1,"jsonrpc":"2.0"}
<<<
{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3023

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":11620,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"d:\\Projects\\arduino_beaver\\00_main","rootUri":"file:///d%3A/Projects/arduino_beaver/00_main","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Projects/arduino_beaver/00_main","name":"00_main"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1872

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/setup.h","languageId":"cpp","version":1,"text":"#pragma once\r\n#include <SoftwareSerial.h>\r\n#include <LiquidCrystal.h>\r\n#define byte uint8_t\r\n\r\n// TIMING\r\n\r\nunsigned long RENDER_INTERVAL = 16.6;\r\nunsigned long LOGIC_INTERVAL = 2;\r\n\r\nunsigned long last_render_time = 0;\r\nunsigned long last_logic_time = 0;\r\n\r\n// PINS\r\nint BTN_PIN_ONE = 1;\r\n\r\nint isRunning = 0;\r\n\r\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\r\n\r\nbyte obstacleTop[8] = {\r\n    0b11111,\r\n    0b01111,\r\n    0b00110,\r\n    0b00110,\r\n    0b00111,\r\n    0b01111,\r\n    0b11110,\r\n    0b00000\r\n  };\r\n  \r\n  byte obstacleBottom[8] = {\r\n    0b00000,\r\n    0b11110,\r\n    0b01111,\r\n    0b00111,\r\n    0b00110,\r\n    0b00110,\r\n    0b01111,\r\n    0b11111\r\n  };\r\n\r\n  byte sprite[24] = {\r\n    // TAIL\r\n    0b00000,\r\n    0b00100,\r\n    0b00110,\r\n    0b00111,\r\n    0b00011,\r\n    0b00001,\r\n    0b00000,\r\n    0b00000,\r\n    // RUN ONE\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b10000,\r\n    0b10000,\r\n    // RUN TWO\r\n    0b11111,\r\n    0b11011,\r\n    0b11111,\r\n    0b11100,\r\n    0b11110,\r\n    0b11100,\r\n    0b00100,\r\n    0b00100\r\n  };\r\n\r\n  const int tailIndex = 0;\r\n  const int runOneIndex = 1;\r\n  const int runTwoIndex = 2;\r\n  const int obstacleTopIndex = 3;\r\n  const int obstacleBottomIndex = 4;\r\n\r\n  // 999999999\r\n  int score = 0;\r\n  unsigned long SCORING_INTERVAL = 1000;\r\n  unsigned long last_score_time = 0;\r\n  int MAX_SCORE = 999999999;\r\n  \r\n  enum class Game_State\r\n  {\r\n      stopped,\r\n      running,\r\n      over\r\n  };\r\n  \r\n  Game_State currentGameState = Game_State::stopped;\r\n"}}}Content-Length: 2880

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Projects/arduino_beaver/00_main/inputs.h","languageId":"cpp","version":1,"text":"#pragma once\r\n\r\ntypedef void (*func_type)(void);\r\n\r\nnamespace inputs {\r\n  struct Button {\r\n        int pin = 0;\r\n        // pressed is used because I want the fps of the render to not be insanely fast, but locked to a set number\r\n        // that is because if it was as fast as the CPU goes, first of all it would render faster than we can see, unless I use delays\r\n        // and secondly, it could also be open to random slow downs or break everything else due to those delays.\r\n        // As such, we have two logic timelines, one that happens at 60FPS(FOR NOW) for the render, and another, which happens almost at CPU speed\r\n        // for the input.\r\n        // Once input is sent however, say u pressed the button, if you released it before the render loop occured, the player would have never jumped\r\n        // so, once you press, I save it as a boolean, and I don't clear it until used in the render loop.\r\n        bool pressed = false;\r\n        bool held = false;\r\n        bool released = false;\r\n        //func_type functions[256];\r\n        //void (*func)(void);\r\n        func_type pressFunc;\r\n        func_type holdFunc;\r\n        func_type releaseFunc;\r\n        \r\n        Button(int startPin, func_type startPressFunc, func_type startHoldFund, func_type startReleaseFunc) {\r\n            pin = startPin;\r\n            pressFunc = startPressFunc;\r\n            holdFunc = startHoldFund;\r\n            releaseFunc = startReleaseFunc;\r\n            //memcpy(functions, startFunctions, sizeof(startFunctions));\r\n        }\r\n\r\n        void Check() {\r\n          if(digitalRead(pin) == HIGH) {\r\n            if(held == false) {\r\n              if(pressed == false) {\r\n                pressed = true;\r\n              }\r\n              held = true;\r\n            }\r\n          } else {\r\n            if(held == true) {\r\n              held = false;\r\n              released=  